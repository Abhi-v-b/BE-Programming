// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    // Structure to represent a student
    struct Student {
        uint256 studentId;
        string name;
        uint256 age;
    }

    // Array to store student records
    Student[] public students;

    // Fallback function - to accept incoming Ether
    fallback() external payable {
        // This function can be used to send Ether to the contract
    }

    // Receive function - to accept incoming Ether
    receive() external payable {
        // This function can be used to receive Ether
    }

    // Function to add a new student
    function addStudent(uint256 _studentId, string memory _name, uint256 _age) public {
        students.push(Student(_studentId, _name, _age));
    }

    // Function to get the number of students
    function getStudentCount() public view returns (uint256) {
        return students.length;
    }

    // Function to get student information by index
    function getStudent(uint256 _index) public view returns (uint256, string memory, uint256) {
        require(_index < students.length, "Index out of bounds");
        Student memory student = students[_index];
        return (student.studentId, student.name, student.age);
    }
}
